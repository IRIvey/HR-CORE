generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int         @id @default(autoincrement())
  name      String
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  reportings Reporting[]
}


model Attendance {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  checkInTime  DateTime?
  checkOutTime DateTime?
  breakStart   DateTime?
  breakEnd     DateTime?
  
  totalHours   Float?    // Calculated total working hours
  breakMinutes Int?      // Break duration in minutes
  overtime     Float?    // Overtime hours if any
  
  date         DateTime  @db.Date  // Remove the @default(now())
  status       AttendanceStatus @default(ABSENT)
  notes        String?
  location     String?   // Office, Remote, etc.
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, date]) // One attendance record per employee per day
  @@index([employeeId])
  @@index([date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
  ON_BREAK
  EARLY_DEPARTURE
  OVERTIME
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employees Employee[]
}


model Employee {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String?        // ← Add this password field (optional for existing records)
  salary        Float
  departmentId  Int
  position      String
  status        String
  joinDate      DateTime
  age           Int
  experience    Int
  role          Role           @default(EMPLOYEE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  attendances   Attendance[]
  department    Department     @relation(fields: [departmentId], references: [id])
  goals         Goal[]
  leaveRequests LeaveRequest[]
  recruitments  Recruitment[]
  salaries      Salary[]
  performanceReviews PerformanceReview[]

  @@index([departmentId])
}

model Goal {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  name        String
  goalTitle   String
  description String
  deadline    DateTime
  status      String   @default("Not Started")
  progress    Int      @default(0)
  priority    String   @default("Medium") // ← already added
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model HRSystem {
  id          Int      @id @default(autoincrement())
  status      String
  lastUpdated DateTime
  version     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LeaveRequest {
  id         Int      @id @default(autoincrement())
  employeeId Int
  startDate  DateTime
  endDate    DateTime
  status     String
  leaveType  String   // ← already added
  reason     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Recruitment {
  id          Int      @id @default(autoincrement())
  type        String
  employeeId  Int
  date        DateTime
  status      String 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
}

model Reporting {
  id            String   @id
  name          String
  type          String
  date          DateTime
  status        String
  size          String
  downloads     Int
  generatedDate DateTime
  content       Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  adminId       Int
  admin         Admin    @relation(fields: [adminId], references: [id])
}

model Salary {
  id            Int      @id @default(autoincrement())
  employeeId    Int
  baseSalary    Float
  allowances    Float     @default(0)
  deductions    Float     @default(0)
  payDate       DateTime
  overtimeHours Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  employee      Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
}

model PerformanceReview {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  rating       Float
  feedback     String
  reviewDate   DateTime
  reviewPeriod String
  goals        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
}

enum Role {
  ADMIN
  TEAM_LEAD
  EMPLOYEE
}

model Job {
  id           String    @id @default(cuid())
  title        String
  department   String
  description  String?   @db.Text
  requirements Json? // Store as JSON array
  salary       String?
  location     String
  status       JobStatus @default(ACTIVE)
  applicants   Int       @default(0)
  postedDate   DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  applications Application[]

  @@map("jobs")
}

model Candidate {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  phone          String?
  experience     String?
  skills         Json? // Store as JSON array
  rating         Float?   @default(0.0)
  source         String?  @default("Website")
  cvPath         String? // File path for uploaded CV
  cvOriginalName String? // Original filename of CV
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  applications Application[]
  interviews   Interview[]

  @@map("candidates")
}

model Application {
  id          String            @id @default(cuid())
  candidateId String
  jobId       String
  status      ApplicationStatus @default(NEW)
  coverLetter String?           @db.Text
  appliedDate DateTime          @default(now())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  // Prevent duplicate applications
  @@unique([candidateId, jobId])
  @@map("applications")
}

model Interview {
  id          String          @id @default(cuid())
  candidateId String
  title       String
  description String?         @db.Text
  type        InterviewType
  date        DateTime
  time        String
  duration    String?
  location    String?
  interviewer String?
  notes       String?         @db.Text
  status      InterviewStatus @default(SCHEDULED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("interviews")
}


enum JobStatus {
  ACTIVE
  DRAFT
  CLOSED
}

enum ApplicationStatus {
  NEW
  SCREENING
  INTERVIEW
  OFFER
  REJECTED
  HIRED
}

enum InterviewType {
  PHONE
  VIDEO
  IN_PERSON
  TECHNICAL
  HR
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

model Notification {
  id         Int      @id @default(autoincrement())
  employeeId Int
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
}

